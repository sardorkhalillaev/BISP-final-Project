import streamlit as st
import pandas as pd # For creating input DataFrame
from datetime import datetime



def get_flight_inputs_for_arrival(df, key_prefix="arr_delay"):
    """Gets common flight inputs, tailored for arrival if needed."""
    inputs = {}
    default_options = ["N/A"]
    airlines = sorted(list(df['AIRLINE'].unique())) if df is not None and 'AIRLINE' in df.columns else default_options
    
    airports = default_options
    if df is not None:
        origin_airports = df['ORIGIN_AIRPORT'].unique() if 'ORIGIN_AIRPORT' in df.columns else []
        dest_airports = df['DESTINATION_AIRPORT'].unique() if 'DESTINATION_AIRPORT' in df.columns else []
        all_airports = sorted(list(set(list(origin_airports) + list(dest_airports))))
        if all_airports: airports = all_airports

    st.subheader("✈️ Flight Details for Arrival Prediction")
    col1, col2, col3 = st.columns(3)
    with col1:
        inputs['AIRLINE'] = st.selectbox("Airline", options=airlines, key=f"{key_prefix}_airline")
    with col2:
        inputs['ORIGIN_AIRPORT'] = st.selectbox("Origin Airport", options=airports, key=f"{key_prefix}_origin")
    with col3:
        inputs['DESTINATION_AIRPORT'] = st.selectbox("Destination Airport", options=airports, key=f"{key_prefix}_dest")

    flight_date = st.date_input("Scheduled Arrival Date", value=datetime.now().date(), key=f"{key_prefix}_arr_date")
    scheduled_arrival_time = st.time_input("Scheduled Arrival Time", value=datetime.now().time(), key=f"{key_prefix}_arr_time")
    
    dt_arrival = datetime.combine(flight_date, scheduled_arrival_time)
    inputs['YEAR'] = dt_arrival.year
    inputs['MONTH'] = dt_arrival.month
    inputs['DAY'] = dt_arrival.day
    inputs['DAY_OF_WEEK'] = dt_arrival.weekday()
    inputs['SCHEDULED_ARRIVAL_HOUR'] = dt_arrival.hour # Model specific feature
    inputs['SCHEDULED_ARRIVAL_MINUTE'] = dt_arrival.minute # Model specific feature
    
    return inputs

def format_arrival_delay_prediction(prediction):
    delay_minutes = prediction[0] 
    st.metric(label="Predicted Arrival Delay", value=f"{delay_minutes:.2f} minutes")
    if delay_minutes > 15:
        st.warning("Flight is predicted to be significantly delayed.")
    elif delay_minutes < -5:
        st.info("Flight is predicted to arrive early.")
    else:
        st.info("Flight is predicted to be on-time or have a minor delay.")

def render_page(df, model_helper, data_helper):
    st.header("⏱️ Arrival Delay Prediction")
    
    MODEL_NAME = "delay_arrival_regressor" # Key for ModelHelper

    if not model_helper.is_model_loaded(MODEL_NAME):
        st.warning(f"Arrival Delay Prediction model ('{MODEL_NAME}') is not loaded. Please load models from the sidebar.")
        return
    if df is None or df.empty:
        st.info("Please load flight data from the sidebar to make predictions.")
        return

    with st.form(key=f"{MODEL_NAME}_form"):
        raw_features_dict = get_flight_inputs_for_arrival(df, key_prefix=MODEL_NAME)
        
        
        submitted = st.form_submit_button("🔮 Predict Arrival Delay")

    if submitted:
        try:
            # DataHelper preprocesses the raw dictionary into a DataFrame ready for the model
            features_df = data_helper.preprocess_input_for_model(raw_features_dict, MODEL_NAME)
            
            # Call the specific prediction method in ModelHelper
            prediction = model_helper.predict_arrival_delay(features_df) 
            
            format_arrival_delay_prediction(prediction)
        except KeyError as e:
            st.error(f"Feature mismatch: Required feature {e} not found or not generated by preprocessing. Check input form and DataHelper.preprocess_input_for_model for '{MODEL_NAME}'.")
        except Exception as e:
            st.error(f"An error occurred during arrival delay prediction: {e}")
            st.exception(e) # Shows full traceback for debugging